name: üöÄ Release Plugin

on:
  push:
    tags:
      - "v*"

jobs:
  # ============================================================================
  # BUILD PLUGIN PACKAGE
  # ============================================================================
  build:
    name: Build Plugin Package
    runs-on: ubuntu-latest
    outputs:
      plugin_slug: ${{ steps.info.outputs.slug }}
      plugin_name: ${{ steps.info.outputs.name }}
      plugin_version: ${{ steps.info.outputs.version }}
      package_name: ${{ steps.package.outputs.name }}
      changelog_content: ${{ steps.changelog.outputs.content }}

    steps:
      - name: Checkout plugin source
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Extract plugin information
        id: info
        run: |
          # Extract tag version without 'v' prefix
          TAG_VERSION="${GITHUB_REF_NAME#v}"

          # Auto-detect plugin slug and file from repository name
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          PLUGIN_SLUG="${REPO_NAME}"
          PLUGIN_FILE="${PLUGIN_SLUG}.php"

          # Verify plugin file exists, otherwise find it
          if [ ! -f "$PLUGIN_FILE" ]; then
            PLUGIN_FILE=$(find . -maxdepth 1 -name "*.php" -exec grep -l "Plugin Name:" {} \; | head -1)
            PLUGIN_SLUG=$(basename "$PLUGIN_FILE" .php)
          fi

          PLUGIN_NAME=$(grep "Plugin Name:" "$PLUGIN_FILE" | head -1 | sed 's/.*Plugin Name:\s*\([^*]*\).*/\1/' | xargs)

          echo "slug=${PLUGIN_SLUG}" >> $GITHUB_OUTPUT
          echo "name=${PLUGIN_NAME}" >> $GITHUB_OUTPUT
          echo "version=${TAG_VERSION}" >> $GITHUB_OUTPUT

          echo "üì¶ Plugin: ${PLUGIN_NAME} (${PLUGIN_SLUG})"
          echo "üè∑Ô∏è Version: ${TAG_VERSION}"
          echo "üîñ Tag: ${GITHUB_REF_NAME}"

      - name: Extract changelog content
        id: changelog
        run: |
          VERSION="${{ steps.info.outputs.version }}"

          echo "Extracting changelog for version: ${VERSION}"

          # Extract changelog from CHANGELOG.md if it exists
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG=$(sed -n "/^## \[${VERSION}\]/,/^## /p" CHANGELOG.md | sed '1d;$d')
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG=$(sed -n "/^## Unreleased/,/^## /p" CHANGELOG.md | sed '1d;$d')
            fi
          else
            CHANGELOG="Release ${VERSION}"
          fi

          {
            echo 'content<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Create release package
        id: package
        run: |
          PLUGIN_SLUG="${{ steps.info.outputs.slug }}"
          PLUGIN_VERSION="${{ steps.info.outputs.version }}"
          PACKAGE_NAME="${PLUGIN_SLUG}_v${PLUGIN_VERSION}.zip"

          echo "üì¶ Creating package: $PACKAGE_NAME"

          # Create ZIP package excluding development files
          zip -r "$PACKAGE_NAME" . \
            -x "*.git*" \
            -x "*.github*" \
            -x "node_modules/*" \
            -x "*.DS_Store*" \
            -x "*.log" \
            -x "*.md" \
            -x "*.zip"

          # Verify package was created
          if [ -f "$PACKAGE_NAME" ]; then
            FILE_SIZE=$(ls -lh "$PACKAGE_NAME" | awk '{print $5}')
            sha256sum "$PACKAGE_NAME" > "${PACKAGE_NAME}.sha256"

            echo "‚úÖ Package created: $PACKAGE_NAME ($FILE_SIZE)"
            echo "name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to create package"
            exit 1
          fi

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.info.outputs.slug }}-${{ steps.info.outputs.version }}
          path: |
            ${{ steps.package.outputs.name }}
            ${{ steps.package.outputs.name }}.sha256
          retention-days: 30

  # ============================================================================
  # CREATE GITHUB RELEASE
  # ============================================================================
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    outputs:
      release_url: ${{ steps.set_url.outputs.release_url }}
      upload_url: ${{ steps.release.outputs.upload_url }}
      is_prerelease: ${{ steps.prerelease.outputs.is_prerelease }}

    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.plugin_slug }}-${{ needs.build.outputs.plugin_version }}

      - name: Detect pre-release
        id: prerelease
        run: |
          TAG="${{ github.ref_name }}"
          if [[ "$TAG" =~ -alpha || "$TAG" =~ -beta || "$TAG" =~ -rc ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "üîñ Pre-release detected: $TAG"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Production release: $TAG"
          fi

      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ needs.build.outputs.plugin_name }} ${{ github.ref_name }}
          body: |
            # ${{ needs.build.outputs.plugin_name }} ${{ github.ref_name }}

            ${{ needs.build.outputs.changelog_content }}

            ## üì¶ Installation

            1. Download the plugin ZIP file below
            2. Upload to WordPress via Plugins ‚Üí Add New ‚Üí Upload Plugin
            3. Activate the plugin

            ---

            **Package**: `${{ needs.build.outputs.package_name }}`
            **Generated**: ${{ github.sha }}
          files: |
            ${{ needs.build.outputs.package_name }}
            ${{ needs.build.outputs.package_name }}.sha256
          draft: false
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
          generate_release_notes: false

      - name: Set release URL output
        id: set_url
        run: |
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo "release_url=${RELEASE_URL}" >> $GITHUB_OUTPUT
          echo "‚úÖ Release URL: ${RELEASE_URL}"

  # ============================================================================
  # NOTIFY EDD STORE
  # ============================================================================
  edd-webhook:
    name: Notify EDD Store
    runs-on: ubuntu-latest
    needs: [build, github-release]
    if: |
      always() &&
      needs.build.result == 'success' &&
      needs.github-release.result == 'success'

    steps:
      - name: Get release asset API URL
        id: get_asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PACKAGE_NAME="${{ needs.build.outputs.package_name }}"
          echo "üì¶ Fetching asset API URL for: $PACKAGE_NAME"

          # Get asset API URL from GitHub API
          ASSET_URL=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} \
            --jq ".assets[] | select(.name == \"$PACKAGE_NAME\") | .url")

          if [ -z "$ASSET_URL" ] || [ "$ASSET_URL" == "null" ]; then
            echo "‚ùå Could not find asset URL for $PACKAGE_NAME"
            exit 1
          fi

          echo "asset_url=${ASSET_URL}" >> $GITHUB_OUTPUT
          echo "‚úÖ Asset API URL: ${ASSET_URL}"

      - name: Sync release to EDD Store
        uses: code-atlantic/edd-release-sync@v0.2.0
        with:
          edd_id: ${{ secrets.EDD_PRODUCT_ID }}
          version: ${{ needs.build.outputs.plugin_version }}
          release_url: ${{ needs.github-release.outputs.release_url }}
          download_url: "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ needs.build.outputs.package_name }}"
          asset_api_url: ${{ steps.get_asset.outputs.asset_url }}
          webhook_url: ${{ secrets.EDD_WEBHOOK_URL }}
          webhook_token: ${{ secrets.EDD_WEBHOOK_TOKEN }}
          plugin_slug: ${{ needs.build.outputs.plugin_slug }}
          is_prerelease: ${{ needs.github-release.outputs.is_prerelease }}

  # ============================================================================
  # SLACK NOTIFICATION
  # ============================================================================
  slack-notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [build, github-release, edd-webhook]
    if: always() && needs.build.result == 'success'

    steps:
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          PLUGIN_NAME="${{ needs.build.outputs.plugin_name }}"
          PLUGIN_VERSION="${{ needs.build.outputs.plugin_version }}"
          RELEASE_URL="${{ needs.github-release.outputs.release_url }}"

          # Build status indicators
          GITHUB_STATUS="${{ needs.github-release.result == 'success' && '‚úÖ Created' || '‚ùå Failed' }}"
          EDD_STATUS="${{ needs.edd-webhook.result == 'success' && '‚úÖ Synced' || needs.edd-webhook.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}"

          TITLE="üöÄ RELEASE: ${PLUGIN_NAME} ${{ github.ref_name }}"

          # Build message text
          MESSAGE="*Release Summary for ${PLUGIN_NAME}*\n"
          MESSAGE="${MESSAGE}‚Ä¢ *Version:* ${{ github.ref_name }} (${PLUGIN_VERSION})\n"
          MESSAGE="${MESSAGE}‚Ä¢ *GitHub Release:* ${GITHUB_STATUS}\n"
          MESSAGE="${MESSAGE}‚Ä¢ *EDD Webhook:* ${EDD_STATUS}\n\n"
          MESSAGE="${MESSAGE}üì¶ <${RELEASE_URL}|Download Release>\n\n"
          MESSAGE="${MESSAGE}#release #automation #popup-maker"

          echo "üì¢ Sending Slack notification..."
          echo "Title: $TITLE"

          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "‚ö†Ô∏è SLACK_WEBHOOK_URL secret not configured - skipped"
            exit 0
          fi

          # Send to Slack
          curl -X POST \
            --data-urlencode "payload={\"text\": \"${TITLE}\\n\\n${MESSAGE}\", \"username\": \"Release Bot\", \"icon_emoji\": \":rocket:\"}" \
            "$SLACK_WEBHOOK_URL" \
            --fail --silent --show-error

          echo "‚úÖ Slack notification sent successfully"

  # ============================================================================
  # RELEASE SUMMARY
  # ============================================================================
  summary:
    name: Generate Release Summary
    runs-on: ubuntu-latest
    needs: [build, github-release, edd-webhook, slack-notification]
    if: always()

    steps:
      - name: Generate release summary
        run: |
          PLUGIN_NAME="${{ needs.build.outputs.plugin_name }}"
          VERSION="${{ github.ref_name }}"

          echo "# üöÄ Release Summary: ${PLUGIN_NAME} ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          [ "${{ needs.build.result }}" == "success" ] && echo "‚úÖ **Package Creation**: Package built successfully" >> $GITHUB_STEP_SUMMARY || echo "‚ùå **Package Creation**: Failed" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.github-release.result }}" == "success" ] && echo "‚úÖ **GitHub Release**: Release created" >> $GITHUB_STEP_SUMMARY || echo "‚ùå **GitHub Release**: Failed" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.edd-webhook.result }}" == "success" ] && echo "‚úÖ **EDD Webhook**: Webhook delivered" >> $GITHUB_STEP_SUMMARY || echo "‚ùå **EDD Webhook**: Failed or skipped" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.slack-notification.result }}" == "success" ] && echo "‚úÖ **Slack Notification**: Notification sent" >> $GITHUB_STEP_SUMMARY || echo "‚ùå **Slack Notification**: Failed or skipped" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üì¶ Package Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**File:** \`${{ needs.build.outputs.package_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Download:** [GitHub Release](${{ needs.github-release.outputs.release_url }})" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*üöÄ Release Generated by GitHub Actions*" >> $GITHUB_STEP_SUMMARY
